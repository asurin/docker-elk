input {
	tcp {
		port => 5000
	}
	beats {
		port => 5044
	}
}

## Add your filters / logstash plugins configuration here

filter {
	grok {
		match => [ "message", ".*\s(?<type>(plex|openvpn|minecraft-server|minecraft-overviewer|minecraft-nginx|rtorrent-php|rtorrent-nginx|rtorrent-torrent|surfacedetail-redis|surfacedetail-nginx|surfacedetail-mysql|surfacedetail-rails|surfacedetail-sphinx))\[\d+\]:\s.*"]
	}
	if [type] == "plex" {
		grok {
			match => ["message", "<\d*>.+plex\[.+\]:.+\[.+\]\s(?<log_level>.+)\s-\s(?<log_content>.*)"]
		}
	} else if [type] == "openvpn" or [type] == "minecraft-server" {
		grok {
			match => ["message", "<\d*>.+(openvpn|minecraft-server)\[.+\]:\s(?<log_content>.*)"]
		}
	} else if [type] == "minecraft-overviewer" {
		grok {
			match => ["message", "<\d*>.+minecraft-overviewer\[.+\]:\s+\d+-\d+-\d+\s\d+:\d+:\d+\s+(?<log_content>.*)"]
		}
	} else if [type] == "minecraft-nginx" or [type] == "rtorrent-nginx" or [type] == "surfacedetail-nginx" {
		if "access" in [tags] {
			grok {
				match => [ "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}"]
				overwrite => [ "message" ]
			}
			mutate {
				convert => ["response", "integer"]
				convert => ["bytes", "integer"]
				convert => ["responsetime", "float"]
			}
			geoip {
				source => "clientip"
				target => "geoip"
				add_tag => [ "nginx-geoip" ]
			}
			date {
				match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
				remove_field => [ "timestamp" ]
			}
			useragent {
				source => "agent"
			}
		} else if "error" in [tags] {
			grok {
				match => [ "message" , "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:message}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: (?<server>%{IP}|%{HOSTNAME})?)(?:, request: %{QS:request})?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")?"]
			}
			geoip {
				source => "client"
				target => "geoip"
				add_tag => [ "nginx-geoip" ]
			}
			date {
				match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
				remove_field => [ "timestamp" ]
			}
		}
	} else if [type] == "rtorrent-php" {
		grok {
			match => [ "message", "\[%{MONTHDAY:day}-%{MONTH:month}-%{YEAR:year} %{TIME:time}\]\s%{DATA:log_level}:\s%{GREEDYDATA:log_content}" ]
			add_field    => { "timestamp" => "%{day}-%{month}-%{year} %{time}" }
			add_tag      => [ "%{log_level}" ]
			remove_field => [ "day", "month", "year", "time"]
		}
		multiline {
			pattern => "(Stack trace:)|(^#.+)|(^\"\")|(  thrown+)|(^\s)"
			what    => "previous"
		}
		date {
			timezone     => "America/New_York"
			match        => [ "timestamp" , "yyyy-MM-dd HH:mm:ss" ]
			target       => "@timestamp"
			remove_field => "timestamp"
		}
	} else if [type] == "rtorrent-torrent" {
		grok {
			match => [ "message", "%{NUMBER:date}\s%{DATA:log_level}\s%{GREEDYDATA:log_content}" ]
		}
		date {
			timezone     => "America/New_York"
			match        => [ "timestamp" , "UNIX" ]
			target       => "@timestamp"
			remove_field => "timestamp"
		}
		mutate {
			gsub => [
				"log_level", "^I$", "INFO",
				"log_level", "^E$", "ERROR",
				"log_level", "^W$", "WARN",
				"log_level", "^N$", "NOTICE",
				"log_level", "^C$", "CRITICAL",
				"log_level", "^D$", "DEBUG"
			]
		}
	} else if [type] == "surfacedetail-redis" {
		grok {
			match => [
				"message", "\[\d+]:\s+%{POSINT:pid}:%{DATA:role}\s%{GREEDYDATA:redislogtime}\s+(?<log_level>[.\-*#])\s+%{GREEDYDATA:log_content}",
				"message", "\[\d+]:\s+%{GREEDYDATA:log_content}"
			]
		}
		date {
			match         => [ "redislogtime", "dd MMM HH:mm:ss.SSS", "dd MMM HH:mm:ss" ]
			remove_field  => "redislogtime"
		}
		mutate {
			gsub => [
				"log_level", "^\.$", "DEBUG",
				"log_level", "^-$", "VERBOSE",
				"log_level", "^\*$", "NOTICE",
				"log_level", "^#$", "WARN",
				"role", "^X$", "SENTINEL",
				"role", "^C$", "RDB CHILD",
				"role", "^S$", "SLAVE",
				"role", "^M$", "MASTER"
			]
		}
	} else if [type] == "surfacedetail-mysql" {
		grok {
			match => [
				"message", "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME})\s(?<thread_id>\d+)\s\[(?<log_level>.*)\]\s(?<log_content>.*)",
				"message", "%{GREEDYDATA:log_content}"
			]
		}
		date {
			match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
			remove_field => [ "timestamp" ]
		}
	} else if [type] == "surfacedetail-rails" {
		if "application" in [tags] or "worker" in [tags] {
			grok {
				match => [
					"message", "., \[%{TIMESTAMP_ISO8601:timestamp}\s#\d+\]\s(?<log_level>.*)\s--\s:\s\[(?<uuid>.*)\]\s(?<json>\{.*\})",
					"message", "(?<json>\{.*\})"
				]
			}
			date {
				match => [ "timestamp" , "ISO8601" ]
				remove_field => [ "timestamp" ]
			}
			if [json] =~ /^\{/ {
		    json {
		        source => "json"
						remove_field => [ "json" ]
		    }
			} else {
				drop { }
			}
		} else if "unicorn-stderr" in [tags] or  "unicorn-stdout" in [tags] {
			# Don't care right now
			drop { }
		}
	} else if [type] == "surfacedetail-sphinx" {
		if "query" in [tags] {
			grok {
				match => [
					"message", "\[(?<timestamp>.[^\]]*)\]\s%{NUMBER:real_time}\ssec\s%{NUMBER:wall_time}\ssec\s\[(?<match_mode>.[^/]*)/(?<filters_count>.[^/]*)/(?<sort_mode>.[^ ]*)\s%{NUMBER:total_matches}\s\(%{NUMBER:offset},%{NUMBER:limit}\)]\s\[(?<index>.*)\]",
					"message", "%{GREEDYDATA:log_content}"
				]
			}
		#	date {
	#			match => [ "timestamp" , "E M d H:m:s.S y" ]
#				remove_field => [ "timestamp" ]
	#		}
		} else if "searchd" in [tags] {
			grok {
				match => [
					"message", "\[(?<timestamp>.[^\]]*)\]\s\[.*\]\s(?<message>.*)",
					"message", "%{GREEDYDATA:log_content}"
				]
			}
			#date {
		#		match => [ "timestamp" , "E M d H:m:s.S y" ]
	#			remove_field => [ "timestamp" ]
#			}
		} else if "application" in [tags] {
			mutate {
				gsub => [
					"message", "\[\d+m", "",
					"message", "\\u\d+b", ""
				]
			}
			grok {
				match => [
					"message", "., \[%{TIMESTAMP_ISO8601:timestamp}\s#\d+\]\s(?<log_level>.*)\s--\s:\s(?<message>.*)",
					"message", "%{GREEDYDATA:log_content}"
				]
			}
			#date {
		 	#	match => [ "timestamp" , "ISO8601" ]
		  #	remove_field => [ "timestamp" ]
			#}
		}
	}
	#	 else {
	#		drop { }
	#	}
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
	}
}
